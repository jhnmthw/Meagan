<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright (c) 2010-2015 Lazery Attack - http://www.lazeryattack.com 
	~ http://www.lazerycode.com ~ ~ Licensed under the Apache License, Version 
	2.0 (the "License"); ~ you may not use this file except in compliance with 
	the License. ~ You may obtain a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 
	~ ~ Unless required by applicable law or agreed to in writing, software ~ 
	distributed under the License is distributed on an "AS IS" BASIS, ~ WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ~ See the 
	License for the specific language governing permissions and ~ limitations 
	under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<groupId>com.pheonix.nfr</groupId>
	<artifactId>meagan</artifactId>
	<version>2.0</version>
	<modelVersion>4.0.0</modelVersion>

	<name>Meagan</name>
	<description>A NFR Testing Framework</description>
	<url></url>
	<developers>
		<developer>
			<name>John Mathew</name>
			<email>jhn.mthwjp@gmail.com</email>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:https://github.com/jhnmthw/meagan.git</connection>
		<developerConnection>https://github.com/jhnmthw/meagan.git</developerConnection>
		<url>https://github.com/jhnmthw/meagan</url>
		<tag>HEAD</tag>
	</scm>
	<licenses>
		<license>
			<name>Apache 2</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<!--Dependency Versions -->
		<selenium.version>3.7.1</selenium.version>
		<assertj-core.version>3.8.0</assertj-core.version>
		<phantomjsdriver.version>1.4.3</phantomjsdriver.version>
		<testng.version>6.11</testng.version>
		<!--Plugin Versions -->
		<driver-binary-downloader-maven-plugin.version>1.0.17</driver-binary-downloader-maven-plugin.version>
		<maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
		<maven-failsafe-plugin.version>2.20.1</maven-failsafe-plugin.version>
		<!--Configuration Properties -->
		<overwrite.binaries>true</overwrite.binaries>
		<read.timeout>30000</read.timeout>
		<connection.timeout>40000</connection.timeout>
		<retry.attempts>4</retry.attempts>
		<threads>1</threads>
		<remote>false</remote>
		<seleniumGridURL />
		<zap-maven-plugin.version>1.2.1-0</zap-maven-plugin.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj-core.version}</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-remote-driver</artifactId>
			<version>${selenium.version}</version>
			<!-- <scope>test</scope> -->
			<exclusions>
				<exclusion>
					<groupId>com.github.detro.ghostdriver</groupId>
					<artifactId>phantomjsdriver</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>${selenium.version}</version>
			<!-- <scope>test</scope> -->
			<exclusions>
				<exclusion>
					<groupId>com.github.detro.ghostdriver</groupId>
					<artifactId>phantomjsdriver</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.codeborne</groupId>
			<artifactId>phantomjsdriver</artifactId>
			<version>${phantomjsdriver.version}</version>
			<!-- <scope>test</scope> -->
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.sourceforge.htmlunit/htmlunit -->
		<dependency>
			<groupId>net.sourceforge.htmlunit</groupId>
			<artifactId>htmlunit</artifactId>
			<version>2.28</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>${testng.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.zaproxy/zap-clientapi -->
		<dependency>
			<groupId>org.zaproxy</groupId>
			<artifactId>zap-clientapi</artifactId>
			<version>1.5.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.zaproxy/zap -->
		<dependency>
			<groupId>org.zaproxy</groupId>
			<artifactId>zap</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<scope>test</scope>
			<version>${selenium.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>exec-maven-plugin</artifactId>
			<version>1.6.0</version>
			<type>maven-plugin</type>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.6</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.6.6</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-nop</artifactId>
			<version>1.6.6</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>1.6.6</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>security</id>
			<activation>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>properties-maven-plugin</artifactId>
						<version>1.0.0</version>
						<executions>
							<execution>
								<phase>initialize</phase>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>security.config.properties</file>
									</files>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<source>${java.version}</source>
							<target>${java.version}</target>
						</configuration>
						<version>${maven-compiler-plugin.version}</version>
					</plugin>
					<plugin>
						<groupId>com.lazerycode.selenium</groupId>
						<artifactId>driver-binary-downloader-maven-plugin</artifactId>
						<version>${driver-binary-downloader-maven-plugin.version}</version>
						<configuration>
							<rootStandaloneServerDirectory>${project.basedir}/src/test/resources/selenium_standalone_binaries</rootStandaloneServerDirectory>
							<downloadedZipFileDirectory>${project.basedir}/src/test/resources/selenium_standalone_zips</downloadedZipFileDirectory>
							<customRepositoryMap>${project.basedir}/src/test/resources/RepositoryMap.xml</customRepositoryMap>
							<overwriteFilesThatExist>${overwrite.binaries}</overwriteFilesThatExist>
							<onlyGetDriversForHostOperatingSystem>true</onlyGetDriversForHostOperatingSystem>
							<fileDownloadRetryAttempts>${retry.attempts}</fileDownloadRetryAttempts>
							<fileDownloadReadTimeout>${read.timeout}</fileDownloadReadTimeout>
							<operatingSystems>
								<windows>true</windows>
								<linux>true</linux>
								<mac>true</mac>
							</operatingSystems>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>selenium</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>create-timestamp</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<timestampFormat>yyyy-MM-dd</timestampFormat>
							<timestampPropertyName>build.date</timestampPropertyName>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${maven-failsafe-plugin.version}</version>
						<configuration>
							<parallel>methods</parallel>
							<threadCount>${threads}</threadCount>
							<systemPropertyVariables>
								<browser>${browser}</browser>
								<screenshotDirectory>${project.build.directory}/screenshots</screenshotDirectory>
								<remoteDriver>${remote}</remoteDriver>
								<gridURL>${seleniumGridURL}</gridURL>
								<desiredPlatform>${platform}</desiredPlatform>
								<desiredBrowserVersion>${browserVersion}</desiredBrowserVersion>
								<proxyEnabled>${proxyEnabled}</proxyEnabled>
								<proxyHost>${proxyHost}</proxyHost>
								<proxyPort>${proxyPort}</proxyPort>
								<appURL>${appURL}</appURL>
								<username>${username}</username>
								<password>${password}</password>
								<usernameElementXPath>${usernameElementXPath}</usernameElementXPath>
								<passwordElementXPath>${passwordElementXPath}</passwordElementXPath>
								<loginBtnXPath>${loginBtnXPath}</loginBtnXPath>
								<logoutBtnXPath>${logoutBtnXPath}</logoutBtnXPath>
								<loginBtnHeadXPath>${loginBtnHeadXPath}</loginBtnHeadXPath>

								<!--Set properties passed in by the driver binary downloader -->
								<phantomjs.binary.path>${phantomjs.binary.path}</phantomjs.binary.path>
								<webdriver.chrome.driver>${webdriver.chrome.driver}</webdriver.chrome.driver>
								<webdriver.ie.driver>${webdriver.ie.driver}</webdriver.ie.driver>
								<webdriver.opera.driver>${webdriver.opera.driver}</webdriver.opera.driver>
								<webdriver.gecko.driver>${webdriver.gecko.driver}</webdriver.gecko.driver>
								<webdriver.edge.driver>${webdriver.edge.driver}</webdriver.edge.driver>
							</systemPropertyVariables>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<!--This goal makes the build fail if you have test failures -->
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>br.com.softplan.security.zap</groupId>
						<artifactId>zap-maven-plugin</artifactId>
						<version>${zap-maven-plugin.version}</version>
						<configuration>
							<!-- Configuration parameters -->
							<zapPort>${proxyPort}</zapPort>
							<targetUrl>${appURL}</targetUrl>
							<zapPath>C:\Program Files\OWASP\Zed Attack Proxy</zapPath>
							<hostname>finexp-alb-2137398505.us-east-1.elb.amazonaws.com</hostname>
							<usernameParameter>${username}</usernameParameter>
							<passwordParameter>${password}</passwordParameter>
							<spiderStartingPointUrl>${appURL}</spiderStartingPointUrl>
							<activeScanStartingPointUrl>${appURL}</activeScanStartingPointUrl>
							<shouldStartNewSession>false</shouldStartNewSession>
							<zapOptions>-newsession D:\ZAP_Sessions\${build.date}-session</zapOptions>
							<!-- -config connection.proxyChain.hostName=localhost -config -->
							<!-- connection.proxyChain.port=8081 -->
							<!-- <authenticationType>selenium</authenticationType> -->
							<shouldRunAjaxSpider>true</shouldRunAjaxSpider>
							<excludeFromScan><!--logout regex -->
							</excludeFromScan>
							<!-- <authenticationType>selenium</authenticationType> -->
							<username>${username}</username>
							<password>${password}</password>
							<loginUrl>http://finexp-alb-2137398505.us-east-1.elb.amazonaws.com/finexpusermgmt/login</loginUrl>
							<httpSessionTokens>
								<token>finxp-auth-token</token>
							</httpSessionTokens>
							<seleniumDriver>firefox</seleniumDriver>
						</configuration>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>analyze</goal>
								</goals>
							</execution>
							<execution>
								<id>start-zap</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>startZap</goal>
								</goals>
							</execution>
							<!-- <execution> -->
							<!-- <id>selenium-analyze</id> -->
							<!-- <phase>post-integration-test</phase> -->
							<!-- <goals> -->
							<!-- <goal>seleniumAnalyze</goal> -->
							<!-- </goals> -->
							<!-- </execution> -->
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>performance</id>
			<activation>
			</activation>
			<dependencies>
				<dependency>
					<groupId>com.pheonix.nfr.meagan</groupId>
					<artifactId>meagan-report-generator</artifactId>
					<version>0.0.1-SNAPSHOT</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<source>${java.version}</source>
							<target>${java.version}</target>
						</configuration>
						<version>${maven-compiler-plugin.version}</version>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>properties-maven-plugin</artifactId>
						<version>1.0.0</version>
						<executions>
							<execution>
								<phase>initialize</phase>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>performance.config.properties</file>
									</files>
								</configuration>
							</execution>
							<execution>
								<phase>pre-site</phase>
								<id>reading-properties</id>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>performance.config.properties</file>
									</files>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<phase>pre-site</phase>
								<goals>
									<goal>create-timestamp</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<timestampFormat>yyyyMMdd</timestampFormat>
							<timestampPropertyName>build.date</timestampPropertyName>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.lazerycode.jmeter</groupId>
						<artifactId>jmeter-maven-plugin</artifactId>
						<version>2.7.0</version>
						<executions>
							<execution>
								<phase>integration-test</phase>
								<id>jmeter-tests</id>
								<goals>
									<goal>jmeter</goal>
								</goals>
							</execution>
							<execution>
								<id>jmeter-check-results</id>
								<phase>verify</phase>
								<goals>
									<goal>results</goal>
								</goals>
							</execution>
							<execution>
								<phase>verify</phase>
								<id>jmeter</id>
								<goals>
									<goal>gui</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<jmeterVersion>3.3</jmeterVersion>
							<testFilesIncluded>
								<jMeterTestFile>${jmxName}.jmx</jMeterTestFile>
								<!-- <jMeterTestFile>Challengers.jmx</jMeterTestFile> -->
							</testFilesIncluded>
							<resultsFileFormat>xml</resultsFileFormat>
							<generateReports>false</generateReports>
							<ignoreResultFailures>true</ignoreResultFailures>
							<propertiesUser>
								<threads>${users}</threads>
								<testIterations>${iteration}</testIterations>
								<duration>${duration}</duration>
								<rampup>${rampup}</rampup>
								<jmeter.reportgenerator.date_format>yyyyMMdd</jmeter.reportgenerator.date_format>
							</propertiesUser>
							<testPlanLibraries>
								<artifact>kg.apc:jmeter-plugins-cmn-jmeter:0.5</artifact>
								<artifact>kg.apc:cmdrunner:2.0</artifact>
							</testPlanLibraries>
							<jmeterExtensions>
								<!-- <artifact>kg.apc:jmeter-plugins-casutg:2.4</artifact> -->
								<!-- <artifact>kg.apc:jmeter-plugins-extras:1.4.0</artifact> -->
								<!-- <artifact>kg.apc:jmeter-plugins-standard:1.4.0</artifact> -->
								<artifact>kg.apc:jmeter-plugins-manager:0.18</artifact>
								<!-- <artifact>org.codehaus.groovy:groovy-all:2.4.12</artifact> -->
								<!-- <artifact>kg.apc:jmeter-plugins-oauth:0.1</artifact> -->
								<!-- <artifact>kg.apc:jmeter-plugins-extras-libs:1.4.0</artifact> -->
								<artifact>kg.apc:jmeter-plugins-cmd:2.1</artifact>
								<artifact>kg.apc:jmeter-plugins-filterresults:2.1</artifact>
								<artifact>kg.apc:jmeter-plugins-graphs-basic:2.0</artifact>

								<!-- For CMD runner tool to work - need latest version of synthesis 
									reoprt plugin -->
								<artifact>kg.apc:jmeter-plugins-synthesis:2.1</artifact>
							</jmeterExtensions>
							<!-- The plugin uses some broken dependencies An alternative is to 
								set this to true and use exclusions, see below -->
							<downloadJMeterDependencies>${downloadDependencies}</downloadJMeterDependencies>
							<downloadExtensionDependencies>${downloadDependencies}</downloadExtensionDependencies>
							<downloadLibraryDependencies>${downloadDependencies}</downloadLibraryDependencies>
							<excludedArtifacts>
								<exclusion>commons-math3:commons-math3</exclusion>
								<exclusion>commons-pool2:commons-pool2</exclusion>
								<exclusion>org.apache.jmeter:jorphan</exclusion>
								<exclusion>org.apache.bsf:bsf-api</exclusion>
								<exclusion>org.bouncycastle:bcmail-jdk15</exclusion>
								<exclusion>org.bouncycastle:bcprov-jdk15</exclusion>
								<exclusion>javax.activation:activation</exclusion>
								<exclusion>commons-logging:commons-logging</exclusion>
							</excludedArtifacts>
							<!-- <remoteConfig> -->
							<!-- <startServersBeforeTests>true</startServersBeforeTests> -->
							<!-- <stopServersAfterTests>true</stopServersAfterTests> -->
							<!-- </remoteConfig> -->
							<guiTestFile>src/test/jmeter/${jmxName}.jmx</guiTestFile>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.googlecode.maven-download-plugin</groupId>
						<artifactId>download-maven-plugin</artifactId>
						<version>1.4.0</version>
						<executions>
							<execution>
								<id>install-cmd-runner</id>
								<phase>pre-site</phase>
								<goals>
									<goal>wget</goal>
								</goals>
								<configuration>
									<url>https://jmeter-plugins.org/files/packages/jpgc-cmd-2.1.zip</url>
									<!-- <uri>https://jmeter-plugins.org/files/packages/jpgc-cmd-2.1.zip</uri> -->
									<unpack>true</unpack>
									<outputDirectory>${project.build.directory}/jmeter</outputDirectory>
									<!-- <md5>df65b5642f33676313ebe4d5b69a3fff</md5> -->
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>default-cli</id>
								<phase>pre-site</phase>
								<configuration>
									<target>
										<copy
											file="${project.basedir}/src/test/resources/template/Jmeter_Reporting_Template.xlsx"
											tofile="${project.basedir}/target/jmeter/Jmeter_Reporting_Template.xlsx" />
										<exec executable="java"
											dir="${project.basedir}/target/jmeter/lib/">
											<arg value="-jar" />
											<arg value="cmdrunner-2.0.jar" />
											<arg value="--tool" />
											<arg value="Reporter" />
											<arg value="--generate-csv" />
											<arg value="AggregateReport-${build.date}.csv" />
											<arg value="--input-jtl" />
											<arg
												value="${project.basedir}/target/jmeter/results/${build.date}-${jmxName}.jtl" />
											<arg value="--plugin-type" />
											<arg value="AggregateReport" />
										</exec>
										<move
											file="${project.basedir}/target/jmeter/lib/AggregateReport-${build.date}.csv"
											todir="${project.basedir}/target/jmeter/results" />

										<exec executable="java"
											dir="${project.basedir}/target/jmeter/lib/">
											<arg value="-jar" />
											<arg value="cmdrunner-2.0.jar" />
											<arg value="--tool" />
											<arg value="Reporter" />
											<arg value="--generate-csv" />
											<arg value="SynthesisReport-${build.date}-all.csv" />
											<arg value="--input-jtl" />
											<arg
												value="${project.basedir}/target/jmeter/results/${build.date}-${jmxName}.jtl" />
											<arg value="--plugin-type" />
											<arg value="SynthesisReport" />
										</exec>
										<move
											file="${project.basedir}/target/jmeter/lib/SynthesisReport-${build.date}-all.csv"
											todir="${project.basedir}/target/jmeter/results" />

										<exec executable="java"
											dir="${project.basedir}/target/jmeter/lib/">
											<arg value="-jar" />
											<arg value="cmdrunner-2.0.jar" />
											<arg value="--tool" />
											<arg value="Reporter" />
											<arg value="--generate-csv" />
											<arg value="SynthesisReport-${build.date}-success.csv" />
											<arg value="--input-jtl" />
											<arg
												value="${project.basedir}/target/jmeter/results/success.jtl" />
											<arg value="--plugin-type" />
											<arg value="SynthesisReport" />
										</exec>
										<move
											file="${project.basedir}/target/jmeter/lib/SynthesisReport-${build.date}-success.csv"
											todir="${project.basedir}/target/jmeter/results" />

										<exec executable="java"
											dir="${project.basedir}/target/jmeter/lib/">
											<arg value="-jar" />
											<arg value="cmdrunner-2.0.jar" />
											<arg value="--tool" />
											<arg value="Reporter" />
											<arg value="--generate-csv" />
											<arg value="SynthesisReport-${build.date}-error.csv" />
											<arg value="--input-jtl" />
											<arg
												value="${project.basedir}/target/jmeter/results/errors.jtl" />
											<arg value="--plugin-type" />
											<arg value="SynthesisReport" />
										</exec>
										<move
											file="${project.basedir}/target/jmeter/lib/SynthesisReport-${build.date}-error.csv"
											todir="${project.basedir}/target/jmeter/results" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>flush-jmeter-lib</id>
								<phase>post-site</phase>
								<configuration>
									<target>
										<delete dir="${project.basedir}/target/jmeter/lib/"
											includeemptydirs="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.lazerycode.jmeter</groupId>
						<artifactId>jmeter-analysis-maven-plugin</artifactId>
						<version>1.0.7-SNAPSHOT</version>
						<executions>
							<execution>
								<id>default-cli</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>analyze</goal>
								</goals>
								<configuration>
									<!-- An AntPath-Style pattern matching a JMeter XML result file 
										to analyze. Must be a fully qualified path. File may be GZiped, must end 
										in .gz then. Default: not set. Required. -->
									<source>${project.build.directory}/jmeter/results/*.jtl</source>

									<!-- directory where to store analysis result files. Default: ${project.build.directory} 
										Required. -->
									<targetDirectory>${project.build.directory}/jmeter/results</targetDirectory>

									<!-- Build failed if source directory is not found. Default: true -->
									<sourceDirFailed>true</sourceDirFailed>

									<!-- Check analysis result files. If threshold is not correct, maven 
										build failed. Default: not set. -->
									<!-- <checkResult> -->
									<!-- Optional : check throughput. -->
									<!-- <throughput> -->
									<!-- Default: -1 (disabling) -->
									<!-- <threshold>-1</threshold> -->

									<!-- Default: UPPER_LOWER_TOLERANCE Values could be : * UPPER : 
										minValue = threshold, maxValue = Double.MAX_VALUE * LOWER : minValue = 0, 
										maxValue = threshold * UPPER_TOLERANCE : minValue = threshold, maxValue = 
										(threshold + (threshold * tolerance / 100)) * LOWER_TOLERANCE : minValue 
										= (threshold - (threshold * tolerance / 100)), maxValue = threshold * UPPER_LOWER_TOLERANCE 
										: minValue = (threshold - (threshold * tolerance / 100)), maxValue = (threshold 
										+ (threshold * tolerance / 100)) * EQUALS : minValue = maxValue = threshold 
										If throughput result test is between minValue and maxValue, maven build is 
										OK otherwise, build failed. -->
									<!-- <toleranceDirection>UPPER_LOWER_TOLERANCE</toleranceDirection> -->

									<!-- Default: 5 (percent) Used for calculate min et max values. -->
									<!-- <tolerance>5</tolerance> -->
									<!-- </throughput> -->
									<!-- Optional : check percent errors. -->
									<!-- <errors> -->
									<!-- As above -->
									<!-- <threshold>-1</threshold> -->
									<!-- <toleranceDirection>UPPER_LOWER_TOLERANCE</toleranceDirection> -->
									<!-- <tolerance>5</tolerance> -->
									<!-- </errors> -->
									<!-- </checkResult> -->

									<!-- Request groups as a mapping from "group name" to "ant pattern". 
										A request uri that matches an ant pattern will be associated with the group 
										name. Request details, charts and CSV files are generated per requestGroup. 
										The order is honored, a sample will be added to the first matching pattern. 
										So it's possible to define various patterns and one catch all pattern. If 
										not set, the threadgroup name of the request will be used. Default: not set. -->
									<requestGroups>
										<requestGroup>
											<name>pages</name>
											<pattern>/page/**</pattern>
											<!-- Optional -->
											<checkResult>
												<!-- As above -->
											</checkResult>
										</requestGroup>
										<requestGroup>
											<name>binaries</name>
											<pattern>/binary/**</pattern>
											<!-- Optional -->
											<checkResult>
												<!-- As above -->
											</checkResult>
										</requestGroup>
									</requestGroups>

									<!-- Change default value for generating charts. Default: width=950, 
										height=500 -->
									<configurationCharts>
										<width>950</width>
										<height>500</height>
									</configurationCharts>

									<!-- Maximum number of samples to keep (in main memory) before compressing. 
										-1 disabling compression. Default: 50000 -->
									<maxSamples>50000</maxSamples>

									<!-- If set to true, the directory structure relative to source 
										will be preserved during output. Default: false -->
									<preserveDirectories>false</preserveDirectories>

									<!-- Set<String> of sample names that should be processed when analysing 
										a results file. Default: sample, httpSample -->
									<sampleNames>
										<sampleName>sample</sampleName>
										<sampleName>httpSample</sampleName>
									</sampleNames>

									<!-- If set to true will process all files found by the pattern 
										defined in <source>. If set to false (the default) it will only process the 
										first file found. *SETTING TO TRUE IS NOT RECOMMENDED* It can substantially 
										impact performance, if you do this you do it at your own risk! Default: false -->
									<processAllFilesFound>false</processAllFilesFound>

									<!-- Template directory where custom freemarker templates are stored. 
										Freemarker templates are used for all generated output. (CSV files, HTML 
										files, console output) Templates must be stored in one of the following three 
										subfolders of the templateDirectory: csv, html, text The entry template must 
										be called "main.ftl". For example, templateDirectory/text/main.ftl will be 
										used for generating the console output. Default: not set. -->
									<!-- <templateDirectory>${project.basedir}/src/main/resources/templates</templateDirectory> -->

									<!-- Mapping from resource URL to file name. Every resource will 
										be downloaded and stored in 'targetDirectory' with the given filename. Tokens 
										"_FROM_" and "_TO_" can be used as placeholders. These placeholders will 
										be replaced by timestamps of execution interval (formatted as ISO8601, e.g. 
										'20111216T145509+0100'). Default: not set. -->
									<!-- <remoteResources> -->
									<!-- <property> -->
									<!-- <name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name> -->
									<!-- <value>my_resource.txt</value> -->
									<!-- </property> -->
									<!-- </remoteResources> -->

									<!-- Specify custom date format for resources not supporting ISO8601. 
										Default IOS8601 -->
									<!-- <remoteResourcesFromUntilDateFormat>HH:mm_yyyyMMdd</remoteResourcesFromUntilDateFormat> -->

									<!-- List of writers that handle all output of the plugin. Defaults 
										to: * com.lazerycode.jmeter.analyzer.writer.ChartWriter (generates detailed 
										charts as PNGs), * com.lazerycode.jmeter.analyzer.writer.DetailsToCsvWriter 
										(generates CSV files for every request group), * com.lazerycode.jmeter.analyzer.writer.DetailsToHtmlWriter 
										(generates HTML files for every request group), * com.lazerycode.jmeter.analyzer.writer.HtmlWriter 
										(generates an HTML overview file), * com.lazerycode.jmeter.analyzer.writer.SummaryTextToFileWriter 
										(generates a TXT overview file), * com.lazerycode.jmeter.analyzer.writer.SummaryTextToStdOutWriter 
										(generates overview output to stdout) If one of those should be deactivated 
										or a new com.lazerycode.jmeter.analyzer.writer.Writer implementation should 
										be added, all desired writers need to be configured! -->
									<!--<writers> -->
									<!--<com.lazerycode.jmeter.analyzer.writer.SummaryTextToStdOutWriter/> -->
									<!--<com.lazerycode.jmeter.analyzer.writer.SummaryTextToFileWriter/> -->
									<!--<com.lazerycode.jmeter.analyzer.writer.HtmlWriter/> -->
									<!--<com.lazerycode.jmeter.analyzer.writer.DetailsToCsvWriter/> -->
									<!--<com.lazerycode.jmeter.analyzer.writer.DetailsToHtmlWriter/> -->
									<!--<com.lazerycode.jmeter.analyzer.writer.ChartWriter/> -->
									<!--</writers> -->

								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<executions>
							<execution>
								<id>default-cli</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>com.pheonix.nfr.meagan.jmeter.ExcelSheetManager</mainClass>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<arguments>
										<argument>-jar</argument>
										<argument>${project.basedir}/src/test/resources/meagan-report-generator-0.0.1-SNAPSHOT.jar</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<build>
		<plugins>
		</plugins>
	</build>
</project>